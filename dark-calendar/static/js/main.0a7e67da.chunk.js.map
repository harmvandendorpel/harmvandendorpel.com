{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["shortMonthToLongMonthMapping","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","transparent","components","opacity","concat","Object","toConsumableArray","s","replace","split","map","v","parseInt","join","App","createCalendar","containerElement","_this","calendar","Calendar","defaultView","nowIndicator","height","window","innerHeight","events","title","start","color","end","allDay","render","$","each","index","event","colorString","style","$content","find","css","$time","times","text","trim","$month","shortMonth","newTitle","Date","getFullYear","html","date","$date","dateString","dayOfWeek","monthDate","time","timeString","hour","substring","length","react_default","a","createElement","className","ref","this","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a7e67da.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Calendar } from 'fullcalendar'\nimport $ from 'jquery'\nimport './App.css'\n\nconst shortMonthToLongMonthMapping = {\n  \"Jan\": \"January\",\n  \"Feb\": \"February\",\n  \"Mar\": \"March\",\n  \"Apr\": \"April\",\n  \"May\": \"May\",\n  \"Jun\": \"June\",\n  \"Jul\": \"July\",\n  \"Aug\": \"August\",\n  \"Sep\": \"September\",\n  \"Oct\": \"October\",\n  \"Nov\": \"November\",\n  \"Dec\": \"December\",\n}\n\nconst toRGB = s => s.replace(/[^\\d,]/g, '').split(',').map(v => parseInt(v))\nconst transparent = (components, opacity) => `rgba(${[...toRGB(components), opacity].join(',')})`\nclass App extends Component {\n\n  createCalendar = (containerElement) => {    \n    if (this.calendar) return\n    this.calendar = new Calendar(containerElement, {      \n      defaultView: 'agendaWeek',\n      nowIndicator: true,      \n      height: window.innerHeight - 30,\n      events: [\n        {\n          title  : '',\n          start  : '2019-01-28',\n          color: '#2cfa9a',\n\n        },\n        {\n          color: '#0cfa9a',\n          title  : '',\n          start  : '2019-01-28',\n          end  : '2019-01-29'\n        },\n        {\n          title  : '',\n          color: '#fcea9a',\n          start  : '2019-01-28T12:00:00',\n          allDay : false,\n          end  : '2019-01-28T14:20:00'\n        },\n        {\n          title  : '',\n          color: '#7f90a3',\n          start  : '2019-01-29T12:20:00',\n          allDay : false,\n          end  : '2019-01-29T14:40:00',\n        },\n        {\n          title  : '',\n          color: '#1eaef5',\n          start  : '2019-01-27T12:30:00',\n          allDay : false,\n          end  : '2019-01-27T14:50:00',\n        }\n      ]\n    });\n    this.calendar.render()\n\n    $('.fc-time-grid-event').each((index, event) => {\n      const colorString = event.style[\"background-color\"] \n      const $content = $(event).find(\".fc-content\")\n      $content.css(\"color\", colorString)\n\n      const $time = $content.find(\".fc-time\")\n      const times = $time.text().split(\"-\")\n      $time.text(times[0].trim())\n      event.style[\"background-color\"] = transparent(colorString, 0.33)\n    })\n\n    $('.fc-day-grid-event').each((index, event) => {\n      const colorString = event.style[\"background-color\"] \n      const $content = $(event).find(\".fc-content\")\n      $content.css(\"color\", colorString)\n      event.style[\"background-color\"] = transparent(colorString, 0.33)\n    })\n\n    const $month = $('.fc-left').find('h2')\n    const shortMonth = $month.text().split(\" â€“ \")[0].split(\" \")[0]\n    const newTitle = [\n      \"<span style='font-weight: 700'>\" + shortMonthToLongMonthMapping[shortMonth] + \"</span>\",\n      new Date().getFullYear()\n    ].join(\" \")\n    $month.html(newTitle)\n\n    $(\".fc-day-header span\").each((index, date) => {\n      const $date = $(date)\n      const dateString = $date.text()\n      const dayOfWeek = dateString.split(\" \")[0]\n      const monthDate = dateString.split(\"/\")[1]\n      $date.text(`${dayOfWeek} ${monthDate}`)\n    })\n\n    $(\".fc-slats .fc-time span\").each((index, time) => {\n      const $time = $(time)\n      const timeString = $time.text()\n      let hour = parseInt(timeString.substring(0, timeString.length - 2))\n      const ampm = timeString.substring(timeString.length - 2, timeString.length)\n\n      if (ampm === \"pm\") {\n        hour += 12\n      }\n\n      $time.text(`${hour}:00`)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.createCalendar}>\n        \n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}